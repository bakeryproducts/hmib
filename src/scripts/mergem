#!/usr/bin/python3

import fire
from pathlib import Path
import numpy as np
import rasterio
from mp import parallel_read

import warnings
warnings.filterwarnings("ignore", category=rasterio.errors.NotGeoreferencedWarning)

NUM_PROCESSES = 8


def read_tiff(fn):
    # return rasterio.open(fn).read()
    return parallel_read(fn, NUM_PROCESSES)


def tiff_merge_mask(tiff, mask, dst, path_mask2=None):
    print('\tusing use shitload of mem')
    img = read_tiff(tiff)
    mask = read_tiff(mask)
    print(f"{img.shape=}")
    print(f"{mask.shape=}")
    #assert mask.max() <= 1 + 1e-6

    if img.shape[0] == 1:
        img = np.repeat(img, 3, 0)

    if mask.shape[0] == 3:
        mask = mask[0]

    red = mask * 200 if mask.max() <= 1 + 1e-6 else mask
    img[1] = img.mean(0)
    img[0] = red

    if path_mask2 is not None:
        mask2 = read_tiff(path_mask2)
        blue = mask2 * 200 if mask2.max() <= 1 + 1e-6 else mask2
        #assert mask2.max() <= 1 + 1e-6
        img[2, ...] = blue

    _, h, w = img.shape

    dst_f = str(Path(dst) / Path(tiff).name)
    dst = rasterio.open(dst_f,
                        'w',
                        driver='GTiff',
                        height=h,
                        width=w,
                        count=3,
                        dtype=np.uint8)
    dst.write(img, [1, 2, 3])  # 3 bands
    dst.close()
    del dst


def start(imgs=None, mask=None, gt=None, dst=None, mode='S', ext='png'):
    assert dst is not None
    assert imgs is not None
    assert mask is not None
    if mode == 'S':
        tiff_merge_mask(imgs, mask, dst, path_mask2=gt)
    elif mode == 'F':
        dst = Path(dst) / 'merged'
        dst.mkdir()
        imgs = Path(imgs)
        mask = Path(mask)
        imgs = list(imgs.rglob(f'*.{ext}'))
        masks = list(mask.rglob(f'*.{ext}'))
        print(len(imgs))
        print(len(masks))
        assert len(imgs) == len(masks)

        for i,m in zip(imgs, masks):
            d = dst / i.parent.name
            d.mkdir(exist_ok=True)
            tiff_merge_mask(i, m, d)


if __name__ == '__main__':
    fire.Fire(start)
